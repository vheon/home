if !has('nvim')
  set encoding=utf-8
  scriptencoding utf8
endif

" https://github.com/rhysd/dotfiles/blob/af0e953113175f6e5ee1ed3f8b368dd76eb05ad0/vimrc#L16-L19
" highlight in after/syntax/vim.vim
augroup VimrcAutocmds
  autocmd!
augroup END
command! -nargs=* Autocmd autocmd VimrcAutocmds <args>


let g:dotvim = fnamemodify($MYVIMRC, ':h')
let g:mapleader="\<Space>"

call plug#begin(g:dotvim.'/bundle')
let g:plug_window = 'tabnew'
let g:plug_pwindow = 'vertical rightbelow new'
let g:plug_timeout = 1000

let g:plug_url_format = 'https://github.com/%s.git'
Plug 'vheon/vim-colors-solarized'
" XXX(vheon): check for compatibility issue with iTerm2 and tmux
" Plug 'vheon/vim-cursormode'
unlet! g:plug_url_format

Plug 'fmoralesc/vim-help-grimoire'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-repeat'

Plug 'justinmk/vim-dirvish'

Plug 'rstacruz/vim-closer'
Plug 'tpope/vim-endwise'
let g:endwise_abbreviations = 1

Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-rsi'

Plug 'mhinz/vim-grepper'
let g:grepper = {}
let g:grepper.switch = 0
nnoremap <Leader>gw :Grepper -query <C-R><C-W><cr>

Plug 'romainl/vim-qf'
let g:qf_auto_open_quickfix = 0
let g:qf_auto_open_loclist = 0
nmap <Leader>q <Plug>(qf_qf_toggle)
nmap <Leader>l <Plug>(qf_loc_toggle)
" From this I only want the mapping for the operator `d` and `dd` to delete
" specific entries from the quickfix
Plug 'wincent/ferret'
let g:FerretLoaded = 1

Plug 'machakann/vim-textobj-delimited'
Plug 'PeterRincker/vim-argumentative'
Plug 'AndrewRadev/dsf.vim'

Plug 'bronson/vim-visual-star-search'
Plug 'tommcdo/vim-lion'
Plug 'tommcdo/vim-exchange'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'AndrewRadev/inline_edit.vim'
Plug 'AndrewRadev/linediff.vim'

Plug 'Valloric/YouCompleteMe', { 'do': function('startup#YCMInstall') }
let g:ycm_confirm_extra_conf    = 0
let g:ycm_complete_in_comments  = 1
let g:ycm_global_ycm_extra_conf = g:dotvim.'/ycm_extra_conf.py'
let g:ycm_extra_conf_vim_data   = [ '&filetype' ]
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_filetype_blacklist = { 'help': 1 }

Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
let g:UltiSnipsEditSplit = 'context'

Plug 'Shougo/neco-vim'
let g:ycm_semantic_triggers = get( g:,'ycm_semantic_triggers', {} )
let g:ycm_semantic_triggers.vim = ['$', '&', 're![\w&$<-][\w:#<>-]*']

if has( 'nvim' )
Plug 'neomake/neomake'
let g:neomake_verbose = 0
" C and CPP are handled by YCM and java usually by eclim
let s:neomake_exclude_ft = [ 'c', 'cpp', 'java', 'python' ]
Autocmd BufWritePost * if index(s:neomake_exclude_ft, &ft) < 0 | Neomake | endif
endif

Plug 'Valloric/MatchTagAlways'

Plug 'tpope/vim-scriptease'
Plug 'majutsushi/tagbar'
let g:tagbar_sort = 0
let g:tagbar_autoclose = 1
let g:tagbar_width = 55
nnoremap <Leader>o :TagbarToggle<CR>

Plug 'fatih/vim-go', { 'do': function('startup#GoBinsInstall') }
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_fmt_command = 'goimports'

Plug 'vim-jp/cpp-vim'
Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'tmux-plugins/vim-tmux'
Plug 'kballard/vim-fish'
Plug 'vimgineers/vim-hugefile'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
autocmd! User FzfStatusLine setlocal statusline=%#StatusLine#\ >\ fzf

nnoremap <silent> <Leader>pg :GFiles<cr>
nnoremap <silent> <Leader>pf :Files<cr>
nnoremap <silent> <Leader>bb :Buffers<cr>


Plug 'derekwyatt/vim-fswitch'
Autocmd BufEnter *.h let b:fswitchlocs = 'rel:./,./Unix/,./Windows/'
      \ | let b:fswitchdst = 'cpp'
nnoremap <silent> <Leader>af :FSHere<cr>

function! s:UnixAlternative()
  let l:alternative = expand('%:p:h').'/Unix/Unix'.expand('%:t')
  if filereadable( l:alternative )
    execute 'edit' l:l:alternative
  else
    echom 'There is not a Unix alternative for this file'
  endif
endfunction
command! -nargs=0 FSUnix call s:UnixAlternative()
nnoremap <silent> <Leader>au :FSUnix<cr>

call plug#end()

runtime! macros/matchit.vim
runtime plugin/sensible.vim

" In the standart runtime there's a filetype.vim that can handle file.m either
" as matlab file or as objc file if the file is not empty. On empty file it
" fallback to g:filetype_m if specified or 'matlab'
let g:filetype_m = 'objc'

" Set them in this order to avoid sourcing color/solarized.vim more than one
set t_Co=16
set background=dark
silent! colorscheme solarized
" taken from http://www.reddit.com/r/vim/comments/1skaam/color_scheme_survey/
" hi Special guifg=#799d6a

set synmaxcol=512

set spelllang=en,it

set completeopt-=preview
set completeopt+=menuone
set pumheight=30

set cindent
set cinoptions=L0,g0,N-s,t0,(0
set shiftround

set timeoutlen=500
set updatetime=750

set lazyredraw
set smartcase
set ignorecase
set nohlsearch


set tabline=%!tabline#line()
if has('vim_starting')
let &statusline  = ''
let &statusline .= '%h%w '
let &statusline .= '%<%f '
let &statusline .= '%{fugitive#statusline()}'
let &statusline .= '%-4(%m%r%)'
let &statusline .= '%{&paste ? "P" : ""}'
let &statusline .= '%='
let &statusline .= '%y '
let &statusline .= '%-14(%P %3l:%02c%)'
let &statusline .= '[%{strlen(&l:fenc) ? &enc : &l:fenc}]'
endif
set cmdheight=2
set noshowmode
set wildmode=list:longest
set wildignore+=.hg,.git,.svn
set wildignore+=*.o,*.obj,*~
set wildignore+=*.DS_Store
set wildignore+=*.png,*.jpg,*.jpeg,*.gif
set wildignore+=*.mkv,*.avi
set wildignore+=*.pyc
set wildignore+=*.class
set wildignore+=target/*,build/*

set nomore

set noshowcmd

set noautochdir
set hidden
set cursorline
set colorcolumn=81

set diffopt=filler,foldcolumn:0,vertical,context:999
set viminfo=!,'10,<50,s20,h
set undolevels=128

set nostartofline

set noerrorbells
set novisualbell
set t_vb=

" Prevent Vim from clobbering the scroll back buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

set noswapfile
set nobackup
set nowritebackup

set formatoptions-=oa

set nofoldenable
set foldlevelstart=99
set foldminlines=5
set foldmethod=manual

set list
let &fillchars = "vert:\u2502"
let &listchars = "tab:\u2192 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u26ad"
let &showbreak = "\u21aa "

if !has('nvim')
  set mouse=a
  set ttymouse=xterm2
endif

command! W exec 'w !sudo tee % > /dev/null' | e!
command! -nargs=0           FollowSymlink   call functions#FollowSymlink()
command! -nargs=*           SetIndent       call functions#SetIndent(<f-args>)
command! -nargs=+           Expandtab       call functions#Expandtab(<f-args>)
command! -nargs=0           Rename          call functions#Rename()
command!                    Remove          call functions#Remove()
command! -bar     -nargs=*  Scratch         call functions#ScratchEdit(<q-args>)
command! -range=% -nargs=0  StripWhitespace call functions#StripWhitespace(<line1>,<line2>)
command! -bang    -nargs=*  TabTitle        call tabline#set_title(<q-args>, <q-bang>)

" this is for stop profiling after starting vim with
" vi --cmd 'profile start vimrc.profile' --cmd 'profile func *' --cmd 'profile file *'
" I have a script in ~/bin which start vim like this
command! -nargs=0 StopProfiling call profile#stop()
" If I want to profile something after that vim started
command! -nargs=0 StartProfiling call profile#start()

" more consistent with other operator
nnoremap Y y$

nnoremap Q gq
xnoremap Q gq

" possible mnemonic? let say is for YELL
inoremap <C-y> <esc>gUiw`]a

" Practical Vim tip #34
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

" XXX: add visualmode version
nmap mw <Plug>(SimpleMark)
nnoremap <silent> <C-L> :nohlsearch<cr>:MarkClearAll<cr>:diffupdate<CR><C-L>

nnoremap <silent> <leader>ev :e `=g:dotvim.'/vimrc'`<CR>
nnoremap <silent> <leader>ez :e ~/.zshrc<CR>
nnoremap <silent> <leader>ef :e ~/.config/fish/config.fish<CR>

" http://vimcasts.org/episodes/the-edit-command
" https://twitter.com/garybernhardt/status/40292706609532928
cnoremap %% <C-R>=printf( '%s%s',
                        \ fnamemodify(expand('%', 1), ':p:h'),
                        \ (!exists("+shellslash") + &shellslash) ? '/' : '\')<CR>
nmap <leader>e. :edit %%
nmap <leader>v. :view %%

nnoremap <C-n> :set invnumber<cr>

" Make selecting inside an HTML tag better
xnoremap <silent> it itVkoj
xnoremap <silent> at atV

" CTRL-U and CTRL-W in insert mode cannot be undone.  Use CTRL-G u to first
" break undo, so that we can undo those changes after inserting a line break.
" For more info, see: http://vim.wikia.com/wiki/Recover_from_accidental_Ctrl-U
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

Autocmd BufEnter,WinEnter,InsertLeave * set cursorline
Autocmd BufLeave,WinLeave,InsertEnter * set nocursorline

Autocmd BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 1 && line("'\"") <= line("$")
                   \|   execute 'normal! g`"'
                   \| endif

Autocmd FileType * setlocal formatoptions-=o

Autocmd BufReadPost vim.profile setl ft=vim nolist

" Poor man vim-rooter, git only, using fugitive
Autocmd BufLeave * let b:last_cwd = getcwd()
Autocmd BufEnter * if exists('b:last_cwd')
                \|   execute 'lcd' escape(b:last_cwd, ' ')
                \| else
                \|   silent! Glcd
                \| endif

" version with g:rooter_change_directory_for_non_project_files = 1
" Autocmd bufenter * if exists('b:last_cwd')
"                 \|   execute 'lcd' b:last_cwd
"                 \| else
"                 \|   try
"                 \|     silent! Glcd
"                 \|   catch
"                 \|     silent! lcd %:p:h
"                 \|   endtry
"                 \| endif

Autocmd BufWinEnter *.txt if &buftype == 'help' | wincmd T | endif

if 0
" When switching colorscheme in terminal vim change the profile in iTerm as well.
let s:is_iTerm = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'iTerm.app'
if !has('gui_running') && s:is_iTerm
  function! s:change_iterm2_profile()
    let dual_colorschemes = ['solarized']
    if exists('g:colors_name')
      let profile = g:colors_name
      if index(dual_colorschemes, g:colors_name) >= 0
        let profile .= '_'.&background
      endif
      let escape = '\033]50;SetProfile='.profile.'\x7'
      if exists('$TMUX')
        let escape = '\033Ptmux;'.substitute(escape, '\\033', '\\033\\033', 'g').'\033\\'
      endif
      silent call system("printf '".escape."' > /dev/tty")
    endif
  endfunction

  Autocmd VimEnter,ColorScheme * call s:change_iterm2_profile()
endif
endif

" Just so I don't lose them xD  ᕕ( ᐛ )ᕗ  ¯\_(ツ)_/¯
